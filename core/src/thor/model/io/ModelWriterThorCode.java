// Copyright 2013 Pedro B. Pascoal
package thor.model.io;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;

import thor.Model;
import thor.model.geoset.Face;
import thor.model.geoset.Mesh;
import thor.model.geoset.Vertex;

//MyTODO: Javadoc
class ModelWriterThorCode extends ModelWriter {
	
	public void write(Model model) throws IOException {
		throw new IOException("Not yet implemented");
	}

	public void write(Model model, File output) throws IOException {
		int tabLevel = 0;
		
		FileWriter fstream = new FileWriter(output);
		BufferedWriter out = new BufferedWriter(fstream);
		out.write("/*"); out.newLine();
		out.write(" * This file was autogenerated using the ModelConverter from the ThOR project."); out.newLine();
		out.write(" * Original File: " + model.getName()); out.newLine();
		out.write(" * Original Format: " + model.getModelFormat()); out.newLine();
		out.write(" * "); out.newLine();
		out.write(" * Model Name: " + model.getModelName()); out.newLine();
		out.write(" * Vertices: " + model.countVertices()); out.newLine();
		out.write(" * Faces: " + model.countFaces()); out.newLine();
		out.write(" */"); out.newLine();
		out.newLine();
		out.write("import java.util.ArrayList;"); out.newLine();
		out.newLine();
		out.write("import thor.Model;"); out.newLine();
		out.write("import thor.model.BufferedModel;"); out.newLine();
		out.write("import thor.model.geoset.BufferedMesh;"); out.newLine();
		out.newLine();
		out.write("/**"); out.newLine();
		out.write(" * This file was autogenerated using the ModelConverter from the ThOR project."); out.newLine();
		out.write(" *"); out.newLine();
		out.write(" * @author ThOR-Framework"); out.newLine();
		out.write(" */"); out.newLine();
		out.write("class " + model.getModelName() + " {"); out.newLine();
		out.newLine();
		out.write(printTabLevel(++tabLevel) + "@SuppressWarnings(\"serial\")"); out.newLine();
		out.write(printTabLevel(tabLevel) + "public static Model createModel() {"); out.newLine();
		out.write(printTabLevel(++tabLevel) + "BufferedModel model = new BufferedModel(\"" + model.getModelName() + "\", \"java\" );"); out.newLine();
		out.write(printTabLevel(tabLevel) + "BufferedMesh mesh = new BufferedMesh();"); out.newLine();
		out.newLine();
		
		// Write all meshes of the model
		List<Mesh> meshes = model.getMeshes();
		for(int m=0; m < meshes.size(); m++ ) {
			out.write(printTabLevel(tabLevel) + "// Mesh number: " + m); out.newLine();
			
			// Write all vertices
			out.write(printTabLevel(tabLevel) + "// Add list of vertices:"); out.newLine();
			List<Vertex> vertices = meshes.get(m).getVertices();
			for(int v=0; v < vertices.size(); v++) {
				out.write(printTabLevel(tabLevel) + "mesh.addVertex(");
				out.write("" + vertices.get(v).getX() + ",");
				out.write("" + vertices.get(v).getY() + ",");
				out.write("" + vertices.get(v).getZ() + ");");
				out.newLine();
			}
			out.newLine();
			
			// Write all faces
			out.write(printTabLevel(tabLevel) + "// Add list of faces:"); out.newLine();
			List<Face> faces = model.getMeshes().get(0).getFaces();
			for(int f=0; f < faces.size(); f++) {
				out.write(printTabLevel(tabLevel) + "mesh.addFace(");
				out.write("new ArrayList<Integer>() {{");
				for(int i = 0; i < faces.get(f).Vertices.size(); i++) {
					out.write("add(" + faces.get(f).Vertices.get(i) + ");");
				}
				out.write("}});");
				out.newLine();
			}
			out.newLine();
			
			// Add mesh to the model
			out.write(printTabLevel(tabLevel) + "// Add built mesh:"); out.newLine();
			out.write(printTabLevel(tabLevel) + "model.addMesh(mesh);"); out.newLine();
		}
		out.write(printTabLevel(tabLevel) + "return model;"); out.newLine();
		out.write(printTabLevel(--tabLevel) + "}"); out.newLine();
		out.write(printTabLevel(--tabLevel) + "}"); out.newLine();
		out.close();
		
		fstream.close();
	}
	
	static String printTabLevel(int level) {
		String tab="";
		for(int i = 0; i < level; i++)
			tab+="\t";
		return tab;
	}
}


