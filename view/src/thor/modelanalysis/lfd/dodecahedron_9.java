/*
 * This file is part of the ThOR project: http://3dorus.ist.utl.pt/tools/thor
 * ThOR is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * ThOR is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * 
 * We kindly ask you to refer the any or one of the following publications in
 * any publication mentioning or employing ThOR:
 * 
 * Pedro B. Pascoal and Alfredo Ferreira. 8th Eurographics Workshop on 3D Object Retrieval,
 * Zurich, Switzerland, May 2-3, 2015
 * 
 * Copyright statement:
 * ====================
 * (c) 2011-2015 by Pedro B. Pascoal (pmbp@tecnico.ulisboa.pt)
 * http://3dorus.ist.utl.pt/tools/thor, https://web.ist.utl.pt/pmbp/projects/thor
 */
package thor.modelanalysis.lfd;

import java.util.ArrayList;

import thor.Model;
import thor.model.BufferedModel;
import thor.model.geoset.BufferedMesh;

/**
 * This file was autogenerated using the ModelConverter from the ThOR project.

 * Original File: dodecahedron_9.off
 * Original Format: off
 * 
 * Model Name: dodecahedron_9
 * Vertices: 20
 * Faces: 20

 * @author ThOR-ModelConverter
 */
class dodecahedron_9 {

	@SuppressWarnings("serial")
	public static Model createModel() {
		BufferedModel model = new BufferedModel("dodecahedron_9", "java");
		BufferedMesh mesh = new BufferedMesh();

		// Add list of vertices:
		mesh.addVertex(0.325105f,-0.854883f,0.55622f);
		mesh.addVertex(-0.433545f,-0.860279f,0.466744f);
		mesh.addVertex(-0.582969f,-0.852234f,-0.282387f);
		mesh.addVertex(0.083341f,-0.841866f,-0.655902f);
		mesh.addVertex(0.644563f,-0.843503f,-0.137625f);
		mesh.addVertex(1.032835f,-0.18938f,-0.208037f);
		mesh.addVertex(0.953383f,0.203507f,0.442292f);
		mesh.addVertex(0.515949f,-0.207793f,0.914609f);
		mesh.addVertex(-0.124761f,0.186731f,1.046644f);
		mesh.addVertex(-0.711583f,-0.216524f,0.769847f);
		mesh.addVertex(-1.032835f,0.18938f,0.208037f);
		mesh.addVertex(-0.953383f,-0.203507f,-0.442292f);
		mesh.addVertex(-0.515949f,0.207793f,-0.914609f);
		mesh.addVertex(0.124761f,-0.186731f,-1.046644f);
		mesh.addVertex(0.711583f,0.216524f,-0.769847f);
		mesh.addVertex(0.582969f,0.852234f,0.282387f);
		mesh.addVertex(-0.083341f,0.841866f,0.655902f);
		mesh.addVertex(-0.644563f,0.843503f,0.137625f);
		mesh.addVertex(-0.325105f,0.854883f,-0.55622f);
		mesh.addVertex(0.433545f,0.860279f,-0.466744f);

		// Add list of faces:
		mesh.addFace(new ArrayList<Integer>() {{add(15);add(16);add(17);}});
		mesh.addFace(new ArrayList<Integer>() {{add(19);add(15);add(17);}});
		mesh.addFace(new ArrayList<Integer>() {{add(19);add(17);add(18);}});
		mesh.addFace(new ArrayList<Integer>() {{add(5);add(6);add(15);}});
		mesh.addFace(new ArrayList<Integer>() {{add(5);add(15);add(19);}});
		mesh.addFace(new ArrayList<Integer>() {{add(14);add(5);add(19);}});
		mesh.addFace(new ArrayList<Integer>() {{add(14);add(19);add(18);}});
		mesh.addFace(new ArrayList<Integer>() {{add(14);add(18);add(12);}});
		mesh.addFace(new ArrayList<Integer>() {{add(13);add(14);add(12);}});
		mesh.addFace(new ArrayList<Integer>() {{add(17);add(10);add(11);}});
		mesh.addFace(new ArrayList<Integer>() {{add(18);add(17);add(11);}});
		mesh.addFace(new ArrayList<Integer>() {{add(18);add(11);add(12);}});
		mesh.addFace(new ArrayList<Integer>() {{add(10);add(17);add(16);}});
		mesh.addFace(new ArrayList<Integer>() {{add(10);add(16);add(8);}});
		mesh.addFace(new ArrayList<Integer>() {{add(9);add(10);add(8);}});
		mesh.addFace(new ArrayList<Integer>() {{add(16);add(15);add(6);}});
		mesh.addFace(new ArrayList<Integer>() {{add(8);add(16);add(6);}});
		mesh.addFace(new ArrayList<Integer>() {{add(8);add(6);add(7);}});
		mesh.addFace(new ArrayList<Integer>() {{add(5);add(14);add(13);}});
		mesh.addFace(new ArrayList<Integer>() {{add(5);add(13);add(3);}});
		mesh.addFace(new ArrayList<Integer>() {{add(4);add(5);add(3);}});
		mesh.addFace(new ArrayList<Integer>() {{add(13);add(12);add(11);}});
		mesh.addFace(new ArrayList<Integer>() {{add(3);add(13);add(11);}});
		mesh.addFace(new ArrayList<Integer>() {{add(3);add(11);add(2);}});
		mesh.addFace(new ArrayList<Integer>() {{add(10);add(9);add(1);}});
		mesh.addFace(new ArrayList<Integer>() {{add(10);add(1);add(2);}});
		mesh.addFace(new ArrayList<Integer>() {{add(11);add(10);add(2);}});
		mesh.addFace(new ArrayList<Integer>() {{add(9);add(8);add(7);}});
		mesh.addFace(new ArrayList<Integer>() {{add(9);add(7);add(0);}});
		mesh.addFace(new ArrayList<Integer>() {{add(1);add(9);add(0);}});
		mesh.addFace(new ArrayList<Integer>() {{add(6);add(0);add(7);}});
		mesh.addFace(new ArrayList<Integer>() {{add(4);add(0);add(6);}});
		mesh.addFace(new ArrayList<Integer>() {{add(4);add(6);add(5);}});
		mesh.addFace(new ArrayList<Integer>() {{add(1);add(0);add(4);}});
		mesh.addFace(new ArrayList<Integer>() {{add(2);add(1);add(4);}});
		mesh.addFace(new ArrayList<Integer>() {{add(2);add(4);add(3);}});

		// Add built mesh:
		model.addMesh(mesh);
		return model;
	}
}
