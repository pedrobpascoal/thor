/*
 * This file is part of the ThOR project: http://3dorus.ist.utl.pt/tools/thor
 * ThOR is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * ThOR is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * 
 * We kindly ask you to refer the any or one of the following publications in
 * any publication mentioning or employing ThOR:
 * 
 * Pedro B. Pascoal and Alfredo Ferreira. 8th Eurographics Workshop on 3D Object Retrieval,
 * Zurich, Switzerland, May 2-3, 2015
 * 
 * Copyright statement:
 * ====================
 * (c) 2011-2015 by Pedro B. Pascoal (pmbp@tecnico.ulisboa.pt)
 * http://3dorus.ist.utl.pt/tools/thor, https://web.ist.utl.pt/pmbp/projects/thor
 */
package thor.modelanalysis.lfd;

import java.util.ArrayList;

import thor.Model;
import thor.model.BufferedModel;
import thor.model.geoset.BufferedMesh;

/**
 * This file was autogenerated using the ModelConverter from the ThOR project.

 * Original File: dodecahedron_5.off
 * Original Format: off
 * 
 * Model Name: dodecahedron_5
 * Vertices: 20
 * Faces: 20

 * @author ThOR-ModelConverter
 */
class dodecahedron_5 {

	@SuppressWarnings("serial")
	public static Model createModel() {
		BufferedModel model = new BufferedModel("dodecahedron_5", "java");
		BufferedMesh mesh = new BufferedMesh();

		// Add list of vertices:
		mesh.addVertex(0.433241f,-0.969589f,-0.134526f);
		mesh.addVertex(-0.27493f,-1.024096f,0.146734f);
		mesh.addVertex(-0.750567f,-0.681691f,-0.343284f);
		mesh.addVertex(-0.336349f,-0.415564f,-0.927398f);
		mesh.addVertex(0.395281f,-0.593489f,-0.798387f);
		mesh.addVertex(0.786987f,0.058062f,-0.723306f);
		mesh.addVertex(1.067072f,0.084644f,-0.013062f);
		mesh.addVertex(0.848406f,-0.550471f,0.350827f);
		mesh.addVertex(0.39682f,-0.34596f,0.932064f);
		mesh.addVertex(-0.297441f,-0.638673f,0.80593f);
		mesh.addVertex(-0.786987f,-0.058062f,0.723306f);
		mesh.addVertex(-1.067072f,-0.084644f,0.013062f);
		mesh.addVertex(-0.848406f,0.550471f,-0.350827f);
		mesh.addVertex(-0.39682f,0.34596f,-0.932064f);
		mesh.addVertex(0.297441f,0.638673f,-0.80593f);
		mesh.addVertex(0.750567f,0.681691f,0.343284f);
		mesh.addVertex(0.336349f,0.415564f,0.927398f);
		mesh.addVertex(-0.395281f,0.593489f,0.798387f);
		mesh.addVertex(-0.433241f,0.969589f,0.134526f);
		mesh.addVertex(0.27493f,1.024096f,-0.146734f);

		// Add list of faces:
		mesh.addFace(new ArrayList<Integer>() {{add(15);add(16);add(17);}});
		mesh.addFace(new ArrayList<Integer>() {{add(15);add(17);add(18);}});
		mesh.addFace(new ArrayList<Integer>() {{add(19);add(15);add(18);}});
		mesh.addFace(new ArrayList<Integer>() {{add(6);add(15);add(19);}});
		mesh.addFace(new ArrayList<Integer>() {{add(5);add(6);add(19);}});
		mesh.addFace(new ArrayList<Integer>() {{add(5);add(19);add(14);}});
		mesh.addFace(new ArrayList<Integer>() {{add(19);add(18);add(12);}});
		mesh.addFace(new ArrayList<Integer>() {{add(14);add(19);add(12);}});
		mesh.addFace(new ArrayList<Integer>() {{add(14);add(12);add(13);}});
		mesh.addFace(new ArrayList<Integer>() {{add(18);add(17);add(10);}});
		mesh.addFace(new ArrayList<Integer>() {{add(18);add(10);add(11);}});
		mesh.addFace(new ArrayList<Integer>() {{add(12);add(18);add(11);}});
		mesh.addFace(new ArrayList<Integer>() {{add(10);add(17);add(16);}});
		mesh.addFace(new ArrayList<Integer>() {{add(10);add(16);add(8);}});
		mesh.addFace(new ArrayList<Integer>() {{add(9);add(10);add(8);}});
		mesh.addFace(new ArrayList<Integer>() {{add(7);add(8);add(16);}});
		mesh.addFace(new ArrayList<Integer>() {{add(7);add(16);add(15);}});
		mesh.addFace(new ArrayList<Integer>() {{add(6);add(7);add(15);}});
		mesh.addFace(new ArrayList<Integer>() {{add(5);add(14);add(13);}});
		mesh.addFace(new ArrayList<Integer>() {{add(5);add(13);add(3);}});
		mesh.addFace(new ArrayList<Integer>() {{add(4);add(5);add(3);}});
		mesh.addFace(new ArrayList<Integer>() {{add(12);add(11);add(2);}});
		mesh.addFace(new ArrayList<Integer>() {{add(12);add(2);add(3);}});
		mesh.addFace(new ArrayList<Integer>() {{add(13);add(12);add(3);}});
		mesh.addFace(new ArrayList<Integer>() {{add(10);add(9);add(1);}});
		mesh.addFace(new ArrayList<Integer>() {{add(11);add(10);add(1);}});
		mesh.addFace(new ArrayList<Integer>() {{add(11);add(1);add(2);}});
		mesh.addFace(new ArrayList<Integer>() {{add(9);add(8);add(7);}});
		mesh.addFace(new ArrayList<Integer>() {{add(1);add(9);add(7);}});
		mesh.addFace(new ArrayList<Integer>() {{add(1);add(7);add(0);}});
		mesh.addFace(new ArrayList<Integer>() {{add(6);add(0);add(7);}});
		mesh.addFace(new ArrayList<Integer>() {{add(5);add(0);add(6);}});
		mesh.addFace(new ArrayList<Integer>() {{add(4);add(0);add(5);}});
		mesh.addFace(new ArrayList<Integer>() {{add(2);add(1);add(0);}});
		mesh.addFace(new ArrayList<Integer>() {{add(2);add(0);add(4);}});
		mesh.addFace(new ArrayList<Integer>() {{add(3);add(2);add(4);}});

		// Add built mesh:
		model.addMesh(mesh);
		return model;
	}
}
